<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/21/java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%9B%BE%E5%BD%A2%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/"/>
    <url>/2021/02/21/java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%9B%BE%E5%BD%A2%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>##1: 深度优先搜索和广度优先搜索</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/21/java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Spring%E6%A1%86%E6%9E%B6%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E4%B8%80)/"/>
    <url>/2021/02/21/java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Spring%E6%A1%86%E6%9E%B6%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E4%B8%80)/</url>
    
    <content type="html"><![CDATA[<h2 id="Spring框架中的设计模式-一"><a href="#Spring框架中的设计模式-一" class="headerlink" title="Spring框架中的设计模式(一)"></a>Spring框架中的设计模式(一)</h2><h4 id="1：代理模式"><a href="#1：代理模式" class="headerlink" title="1：代理模式"></a>1：代理模式</h4><p>#####1.1： 动态代理</p><p>  动态代理技术是在内存中生成代理对象的一种技术，也是整个代理过程在内存中运行，不需要手写代理类的代码，也不会存在代理类的编译过程，而是直接在运行期，在JVM中凭空造出一个代理对象供我们使用，一般代理技术有以下两种：</p><h6 id="1-1-1-基于JDK（接口）的动态代理"><a href="#1-1-1-基于JDK（接口）的动态代理" class="headerlink" title="1.1.1 基于JDK（接口）的动态代理"></a>1.1.1 基于JDK（接口）的动态代理</h6><p>  JDK自带的动态代理技术，需要使用一个静态方法来创建代理对象。他要求被代理的对象，也就是目标类，必须实现接口，生成的代理对象和原对象都实现相同的接口，是兄弟关系。</p><p>######2.1.1 基于CGLIB（父类）的动态代理</p><p>  第三方CGLIB的动态代理技术，也是可以使用一个静态方法来创建代理对象。它不要求目标类实现接口，但是要求目标类不是最终类，也就是不能被final修饰。因为CGLIB是基于目标类生成改类的一个子类作为代理类，所以目标类必须可以被继承。</p><p>Enhancer.create(Class type,Callback callback)</p><p>​    Callback callback : 主要使用它的一个子接口 MethodInterceptor</p><p><img src="C:\Users\wang\AppData\Roaming\Typora\typora-user-images\image-20200802223530903.png" alt="image-20200802223530903"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/21/java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/springboot%E7%9A%84%E7%9B%B8%E5%85%B3%E4%BB%A3%E7%A0%81/"/>
    <url>/2021/02/21/java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/springboot%E7%9A%84%E7%9B%B8%E5%85%B3%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>###1：coditional 的用法</p><p>​    @Conditional注解是个什么东西呢，它可以根据代码中设置的条件装载不同的bean</p><ol><li>首先自定义一个规则类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCondition</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Condition</span>    </span>&#123; <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">matches</span><span class="hljs-params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span>        </span><br><span class="hljs-function">    </span>&#123;        <br>        <span class="hljs-comment">//在这里写你的逻辑，比如说你想a&gt;0时实例化类A，a&lt;0时不实现       </span><br>        <span class="hljs-keyword">return</span> a&gt;<span class="hljs-number">0</span>;      <br>    &#125;    <br>&#125;<br></code></pre></td></tr></table></figure><p>  2.然后你就可以用在bean上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span>    <br><span class="hljs-meta">@Conditional(MyCondition.class)</span>   <br><span class="hljs-function"><span class="hljs-keyword">public</span> A <span class="hljs-title">a</span><span class="hljs-params">()</span></span>&#123;    <br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> A()  <br>&#125;<br></code></pre></td></tr></table></figure><p>也可以用在类上面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span>    <br><span class="hljs-meta">@Conditional(MyCondition.class)</span>   <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">b</span></span>&#123;    <br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> aaa <span class="hljs-title">aaa</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>###2：springBeanUtil </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/21/java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/redis%E6%A0%B8%E5%BF%83%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%B2%E8%AE%B2/"/>
    <url>/2021/02/21/java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/redis%E6%A0%B8%E5%BF%83%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%B2%E8%AE%B2/</url>
    
    <content type="html"><![CDATA[<h2 id="redis核心数据结构串讲"><a href="#redis核心数据结构串讲" class="headerlink" title="redis核心数据结构串讲"></a>redis核心数据结构串讲</h2><p><img src="C:\Users\wang\AppData\Roaming\Typora\typora-user-images\image-20200809112510941.png" alt="image-20200809112510941"></p><p>###1:string数据结构串讲</p><p><img src="C:\Users\wang\AppData\Roaming\Typora\typora-user-images\image-20200809112615469.png" alt="image-20200809112615469"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/21/java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/MYSQL%E7%B4%A2%E5%BC%95%E6%9C%AC%E8%B4%A8%E7%9A%84%E8%A7%A3%E6%9E%90/"/>
    <url>/2021/02/21/java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/MYSQL%E7%B4%A2%E5%BC%95%E6%9C%AC%E8%B4%A8%E7%9A%84%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p><strong>MYSQL索引本质的解析</strong></p><p>索引是排好序的数据结构，索引底层用的是B-Tree</p><p>1：红黑树是什么？</p><p>就是平衡二叉树，高度差不能超过1层，超过会自动平衡。</p><p>缺点：数据量越大，数据的高度越大，查询的效率太低</p><p>2 ：b-树和b+树</p><p>一个节点上可以存储多个数据，mysql节点的存储大小是16k。</p><p>非叶子节点不存储data，只存储索引，可以放更多的索引</p><p>叶子节点包含所有的索引字段</p><p>叶子节点用指针连接，提高区间的访问性能。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/21/java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    <url>/2021/02/21/java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="jvm的类加载机制"><a href="#jvm的类加载机制" class="headerlink" title="jvm的类加载机制"></a>jvm的类加载机制</h2><p>  JVM将class文件字节码文件加载到内存中， 并将这些静态数据转换成方法区中的运行时数据结构，在堆(并不一定在堆中，HotSpot在方法区中)中生成一个代表这个类的java.lang.Class 对象，作为方法区类数据的访问入口。</p><p>####类加载的七个阶段</p><p><img src="C:\Users\wang\AppData\Roaming\Typora\typora-user-images\image-20201209215132550.png" alt="image-20201209215132550"></p><h4 id="四个概念："><a href="#四个概念：" class="headerlink" title="四个概念："></a>四个概念：</h4><p>  1:class文件：编译之后生成的文件，存储在硬盘上</p><p>  2:class content： 加载阶段，将class文件加载如内存</p><p>  3:class对象： Class  claszz = Test.class   存储在 堆区 </p><p>  4:对象： new出来的对象信息</p><p>class文件在内存中是如何存储的</p><p>方法区是理论(规范)/接口， 永久代、元空间是具体实现</p><p>####永久代元空间相关理论基础</p><p>在jdk7以前是永久代（放在堆区管理）  在jdk8以后是元空间（直接内存管理）</p><p>为什么？ gc问题，堆区里面只能有对象   应用问题class可以动态生成</p><h4 id="元空间的调优"><a href="#元空间的调优" class="headerlink" title="元空间的调优"></a>元空间的调优</h4><p>  原因 ：1：用完不释放   2：gc回收的速度赶不上你使用的速度</p><p>  最小的值 20.75    最大的值 2的48次方</p><p>   java  -XX:+PrintFlagsFinal -version |grep Metaspace</p><p>  规范 ： 1、最小最大设置成一样  2、大小= 物理内存的1/32  3、预留空间 20%-30%</p><p>arthas    VisualVM 进行调优 </p><p>####虚拟机栈</p><p>  栈的一种应用，jvm中一个线程一个虚拟机栈，一个虚拟机栈 方法调用一次生成一个栈帧。</p><p>1、动态链接：方法对象的内存地址（方法区）</p><p>2、</p><p><img src="C:\Users\wang\AppData\Roaming\Typora\typora-user-images\image-20201209220153911.png" alt="image-20201209220153911"></p><p>方法中存储的主要是这样：</p><p><img src="C:\Users\wang\AppData\Roaming\Typora\typora-user-images\image-20201209220318686.png" alt="image-20201209220318686"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/21/java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/java%20%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%20%20JMM/"/>
    <url>/2021/02/21/java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/java%20%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%20%20JMM/</url>
    
    <content type="html"><![CDATA[<p>##java 内存模型  JMM</p><p>###1: java内存模型的基本概念   </p><p>​      当程序在运行过程中，会将运算需要的数据从主存复制一份到CPU的高速缓存当中，那么CPU进行计算时就可以直接从它的高速缓存读取数据和向其中写入数据，当运算结束之后，再将高速缓存中的数据刷新到主存当中。随着CPU性能的不断提高，一层缓存就慢慢的无法满足要求了，就逐渐的衍生出多级缓存。按照数据读取顺序和与CPU结合的紧密程度，CPU缓存可以分为一级缓存（L1），二级缓存（L3），部分高端CPU还具有三级缓存（L3），每一级缓存中所储存的全部数据都是下一级缓存的一部分。</p><p><img src="C:\Users\wang\AppData\Roaming\Typora\typora-user-images\image-20200413090058566.png" alt="image-20200413090058566"></p><p>​    <strong>Java内存模型（Java Memory Model ,JMM）就是一种符合内存模型规范的，屏蔽了各种硬件和操作系统的访问差异的，保证了Java程序在各种平台下对内存的访问都能保证效果一致的机制及规范。</strong></p><p>​    Java内存模型规定了所有的变量都存储在主内存中，每条线程还有自己的工作内存，线程的工作内存中保存了该线程中是用到的变量的主内存副本拷贝，线程对变量的所有操作都必须在工作内存中进行，而不能直接读写主内存。不同的线程之间也无法直接访问对方工作内存中的变量，线程间变量的传递均需要自己的工作内存和主存之间进行数据同步进行。</p><p><img src="C:\Users\wang\AppData\Roaming\Typora\typora-user-images\image-20200412165224038.png" alt="image-20200412165224038"></p><p>​    JMM就作用于工作内存和主存之间数据同步过程，他规定了如何做数据同步以及什么时候做数据同步。</p><p>==主内存和工作内存与JVM内存结构中的Java堆、栈、方法区等并不是同一个层次的内存划分 ？？？？？==</p><p>   <strong>在Java中提供了一系列和并发处理相关的关键字，比如<code>volatile</code>、<code>synchronized</code>、<code>final</code>、<code>concurren</code>包等，来解决原子性、有序性和一致性的问题</strong></p><p>volatile</p><h3 id="2：可见性"><a href="#2：可见性" class="headerlink" title="2：可见性"></a>2：可见性</h3><p>​    java内存模型是通过在变量修改后将新值同步回主内存，在变量读取前从主内存刷新变量值的这种依赖主内存作为传递媒介的方式来实现的。</p><p><img src="C:\Users\wang\AppData\Roaming\Typora\typora-user-images\image-20200412165145016.png"></p><p><img src="C:\Users\wang\AppData\Roaming\Typora\typora-user-images\image-20200412232120401.png" alt="image-20200412232120401"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>如何搭建博客</title>
    <link href="/2019/10/10/%E6%90%AD%E5%BB%BA%E5%A5%BD%E7%9C%8B%E7%9A%84%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BD%BF%E7%94%A8Hexo%E8%BF%9B%E8%A1%8C%E6%90%AD%E5%BB%BA%EF%BC%89/"/>
    <url>/2019/10/10/%E6%90%AD%E5%BB%BA%E5%A5%BD%E7%9C%8B%E7%9A%84%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BD%BF%E7%94%A8Hexo%E8%BF%9B%E8%A1%8C%E6%90%AD%E5%BB%BA%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="搭建好看的静态博客（使用Hexo进行搭建）"><a href="#搭建好看的静态博客（使用Hexo进行搭建）" class="headerlink" title="搭建好看的静态博客（使用Hexo进行搭建）"></a><a href="https://www.cnblogs.com/NinWoo/p/9649162.html">搭建好看的静态博客（使用Hexo进行搭建）</a></h1><p>经常看到大牛的博客非常的高大帅气，虽然我很渣，但是逼格不能输，所以有了以下的搭建记录。</p><p>我的成果<a href="https://smartdongwei.github.io/">smartdongwei</a>,喜欢的可以参考下面的记录一起来动手搞起来。</p><h2 id="安装Git-Bash"><a href="#安装Git-Bash" class="headerlink" title="安装Git Bash"></a>安装Git Bash</h2><p>访问<a href="https://npm.taobao.org/mirrors/git-for-windows/v2.30.1.windows.1/Git-2.30.1-64-bit.exe">git</a>下载最新版本的git bash</p><p>安装完成之后，右键打开git bash,设置用户名和邮件信息</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog">git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> user<span class="hljs-variable">.name</span> <span class="hljs-string">&quot;你的GitHub用户名&quot;</span><br>git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> user<span class="hljs-variable">.email</span> <span class="hljs-string">&quot;你的GitHub注册邮箱&quot;</span><br></code></pre></td></tr></table></figure><p>生成ssh秘钥文件</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C <span class="hljs-string">&quot;GitHub注册邮箱&quot;</span><br></code></pre></td></tr></table></figure><p>直接三个回车即可，默认不需要设置密码。</p><p>查看生成的公钥</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">cat ~<span class="hljs-regexp">/.ssh/i</span>d_rsa.pub<br></code></pre></td></tr></table></figure><p>复制内容，打开<a href="https://github.com/settings/keys">github setting keys</a>界面，创建新的SSH key,并粘贴公钥到Key输入框中。</p><p>在git bash中测试是否配置成功</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">ssh <span class="hljs-symbol">git@</span>github.com<br></code></pre></td></tr></table></figure><p>出现：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">PTY allocation request failed <span class="hljs-keyword">on</span> channel <span class="hljs-number">0</span><br>Hi Ninwoo! You&#x27;ve successfully authenticated, <span class="hljs-keyword">but</span> GitHub <span class="hljs-keyword">does</span> <span class="hljs-keyword">not</span> provide shell access.<br>Connection <span class="hljs-keyword">to</span> github.com closed.<br></code></pre></td></tr></table></figure><p>证明设置成功。</p><h2 id="创建GitHub仓库"><a href="#创建GitHub仓库" class="headerlink" title="创建GitHub仓库"></a>创建GitHub仓库</h2><p>创建新的仓库，仓库名为[用户名].github.io,用户名用Github名称代替。</p><p>这样做的主要目的就是为了以后可以通过该网址进行访问你的博客主页，所以要仔细设置。在这里，我配置成smartdongwei.github.io<br>以下的配置中，也需要对应修改为你自己的仓库名。</p><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>访问<a href="https://link.zhihu.com/?target=https://nodejs.org/en/download/">Node.js</a>官网下载安装包。</p><p>下载完成后，点击安装。打开CMD查看是否安装成功。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">C</span>:\Users\ljo<span class="hljs-number">04</span>&gt;node -v<br><span class="hljs-attribute">v8</span>.<span class="hljs-number">12</span>.<span class="hljs-number">0</span><br><br><span class="hljs-attribute">C</span>:\Users\ljo<span class="hljs-number">04</span>&gt;npm -v<br><span class="hljs-attribute">6</span>.<span class="hljs-number">4</span>.<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>如果上述命令均正常通过，则安装完成。</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>1.创建一个新的文件夹作为Hexo的开发目录，这里我命名为Hexo_project</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">E:\project&gt;<span class="hljs-built_in">mkdir</span> Hexo_project<br></code></pre></td></tr></table></figure><p>2.使用npm安装Hexo</p><p>为了提高安装速度，先配置淘宝npm镜像</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">E:\project\Hexo_project&gt;npm <span class="hljs-built_in">config</span> <span class="hljs-built_in">set</span> registry https:<span class="hljs-comment">//registry.npm.taobao.org</span><br></code></pre></td></tr></table></figure><p>3.安装Hexo</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">E:</span>\project\Hexo_project&gt;npm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure><p>4.初始化hexo</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">E</span>:\project\Hexo_project&gt;hexo init blog<br><span class="hljs-attribute">INFO</span>  Cloning hexo-starter to E:\project\Hexo_project\blog<br><span class="hljs-attribute">Cloning</span> into &#x27;E:\project\Hexo_project\blog&#x27;...<br><span class="hljs-attribute">remote</span>: Counting objects: <span class="hljs-number">68</span>, done.<br><span class="hljs-attribute">remote</span>: Total <span class="hljs-number">68</span> (delta <span class="hljs-number">0</span>), reused <span class="hljs-number">0</span> (delta <span class="hljs-number">0</span>), pack-reused <span class="hljs-number">67</span><br><span class="hljs-attribute">Unpacking</span> objects: <span class="hljs-number">100</span>% (<span class="hljs-number">68</span>/<span class="hljs-number">68</span>), done.<br><span class="hljs-attribute">Submodule</span> &#x27;themes/landscape&#x27; (https://github.com/hexojs/hexo-theme-landscape.git) registered for path &#x27;themes/landscape&#x27;<br><span class="hljs-attribute">Cloning</span> into &#x27;E:/project/Hexo_project/blog/themes/landscape&#x27;...<br><span class="hljs-attribute">remote</span>: Counting objects: <span class="hljs-number">838</span>, done.<br><span class="hljs-attribute">remote</span>: Compressing objects: <span class="hljs-number">100</span>% (<span class="hljs-number">6</span>/<span class="hljs-number">6</span>), done.<br><span class="hljs-attribute">Receiving</span> objects:  <span class="hljs-number">26</span>% (<span class="hljs-number">222</span>/<span class="hljs-number">838</span>), <span class="hljs-number">292</span>.<span class="hljs-number">01</span> KiB | <span class="hljs-number">88</span>.<span class="hljs-number">00</span> KiB/s<br></code></pre></td></tr></table></figure><p>这个过程可能需要等待一阵时间</p><p>5.测试站点是否创建成功</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript"># 创建一篇博客test<br>E:<span class="hljs-symbol">\p</span>roject<span class="hljs-symbol">\H</span>exo_project<span class="hljs-symbol">\b</span>log&gt;hexo n test<br><br># 生成博客<br>E:<span class="hljs-symbol">\p</span>roject<span class="hljs-symbol">\H</span>exo_project<span class="hljs-symbol">\b</span>log&gt;hexo g<br><br># 启动服务器预览<br>E:<span class="hljs-symbol">\p</span>roject<span class="hljs-symbol">\H</span>exo_project<span class="hljs-symbol">\b</span>log&gt;hexo s<br></code></pre></td></tr></table></figure><p>这时，可以打开浏览器访问<a href="http://localhost:4000/%EF%BC%8C%E6%9F%A5%E7%9C%8Bblog%E7%95%8C%E9%9D%A2%EF%BC%8C%E5%8F%91%E7%8E%B0%E5%B7%B2%E7%BB%8F%E5%88%9B%E5%BB%BA%E5%A5%BD%E6%96%B0%E7%9A%84%E6%96%87%E7%AB%A0test%E3%80%82">http://localhost:4000/，查看blog界面，发现已经创建好新的文章test。</a></p><h2 id="推送至网站"><a href="#推送至网站" class="headerlink" title="推送至网站"></a>推送至网站</h2><p>1.修改blog配置文件<code>E:\project\Hexo_project\blog\_config.yml</code></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> git@github.com:smartdongwei/smartdongwei.github.io.git<br><span class="hljs-symbol">  branch:</span> master<br></code></pre></td></tr></table></figure><blockquote></blockquote><p>注意：这里repo要选择ssh的git库链接，否则会在部署的时候报错</p><p>2.安装Git部署插件</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">E:<span class="hljs-symbol">\p</span>roject<span class="hljs-symbol">\H</span>exo_project<span class="hljs-symbol">\b</span>log&gt;npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>3.部署博客</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">E:<span class="hljs-symbol">\p</span>roject<span class="hljs-symbol">\H</span>exo_project<span class="hljs-symbol">\b</span>log&gt;hexo clean<br>E:<span class="hljs-symbol">\p</span>roject<span class="hljs-symbol">\H</span>exo_project<span class="hljs-symbol">\b</span>log&gt;hexo g<br>E:<span class="hljs-symbol">\p</span>roject<span class="hljs-symbol">\H</span>exo_project<span class="hljs-symbol">\b</span>log&gt;hexo d<br></code></pre></td></tr></table></figure><p>4.测试是否部署成功</p><p>现在访问<a href="https://smartdongwei.github.io/%EF%BC%8C%E5%A6%82%E6%9E%9C%E5%87%BA%E7%8E%B0blog%E7%95%8C%E9%9D%A2%E8%BF%99%E8%AF%81%E6%98%8E%E9%83%A8%E7%BD%B2%E6%88%90%E5%8A%9F%E3%80%82">https://smartdongwei.github.io/，如果出现blog界面这证明部署成功。</a></p><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>如果觉得默认主题实在是太丑，可以更换其他<a href="https://hexo.io/themes/">主题</a>,下面的教程中，我选择Next主题。</p><p>1.下载主题</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">E:\project\Hexo_project\blog&gt; git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/theme-next/</span>hexo-theme-<span class="hljs-keyword">next</span> themes/<span class="hljs-keyword">next</span><br></code></pre></td></tr></table></figure><p>2.打开配置文件<code>E:\project\Hexo_project\blog\_config.yml</code>更换主题</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean"># Extensions<br>## Plugins: https:<span class="hljs-comment">//hexo.io/plugins/</span><br>## Themes: https:<span class="hljs-comment">//hexo.io/themes/</span><br>theme: next<br>plugins: hexo-generate-feed<br></code></pre></td></tr></table></figure><p>3.重新部署blog</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">E:<span class="hljs-symbol">\p</span>roject<span class="hljs-symbol">\H</span>exo_project<span class="hljs-symbol">\b</span>log&gt;hexo clean<br>E:<span class="hljs-symbol">\p</span>roject<span class="hljs-symbol">\H</span>exo_project<span class="hljs-symbol">\b</span>log&gt;hexo g<br>E:<span class="hljs-symbol">\p</span>roject<span class="hljs-symbol">\H</span>exo_project<span class="hljs-symbol">\b</span>log&gt;hexo d<br></code></pre></td></tr></table></figure><h2 id="相关插件的url地址"><a href="#相关插件的url地址" class="headerlink" title="相关插件的url地址"></a>相关插件的url地址</h2><p>1：<a href="https://hexo.io/zh-cn/docs/">hexo的中文文档</a></p><p>2:   <a href="https://hexo.fluid-dev.com/docs/">Fluid</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>文档基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux服务器操作</title>
    <link href="/2019/10/10/linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/"/>
    <url>/2019/10/10/linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<p>##linux服务器上相关操作</p><p>####mysql服务器</p><p>1:重启mysql服务端</p><p>​        service mysql restart</p><p>2: 登录MySQL</p><p>​     mysql -u root  -p root</p><h4 id="spark的操作"><a href="#spark的操作" class="headerlink" title="spark的操作"></a>spark的操作</h4><h4 id="hive的相关操作"><a href="#hive的相关操作" class="headerlink" title="hive的相关操作"></a>hive的相关操作</h4>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>十大经典算法的总结</title>
    <link href="/2019/10/10/java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84%E6%80%BB%E7%BB%93/"/>
    <url>/2019/10/10/java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="十大经典排序算法的总结"><a href="#十大经典排序算法的总结" class="headerlink" title="十大经典排序算法的总结"></a>十大经典排序算法的总结</h1><h2 id="1：-冒泡排序"><a href="#1：-冒泡排序" class="headerlink" title="1： 冒泡排序"></a>1： 冒泡排序</h2><p>   冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p><p>###1.1 算法描述</p><ul><li>比较相邻的元素。如果第一个比第二个大，就交换它们两个；</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；</li><li>针对所有的元素重复以上的步骤，除了最后一个；</li><li>重复步骤1~3，直到排序完成。</li></ul><p>###1.2  代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-number">1</span>  　　<span class="hljs-comment">/**</span><br><span class="hljs-comment"> 2      * 冒泡排序</span><br><span class="hljs-comment"> 3      *</span><br><span class="hljs-comment"> 4      * <span class="hljs-doctag">@param</span> array</span><br><span class="hljs-comment"> 5      * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> 6      */</span><br> <span class="hljs-number">7</span>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] bubbleSort(<span class="hljs-keyword">int</span>[] array) &#123;<br> <span class="hljs-number">8</span>         <span class="hljs-keyword">if</span> (array.length == <span class="hljs-number">0</span>)<br> <span class="hljs-number">9</span>             <span class="hljs-keyword">return</span> array;<br><span class="hljs-number">10</span>         <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; array.length; i++)<br><span class="hljs-number">11</span>             <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; array.length - <span class="hljs-number">1</span> - i; j++)<br><span class="hljs-number">12</span>                 <span class="hljs-keyword">if</span> (array[j + <span class="hljs-number">1</span>] &lt; array[j]) &#123;<br><span class="hljs-number">13</span>                     <span class="hljs-keyword">int</span> temp = array[j + <span class="hljs-number">1</span>];<br><span class="hljs-number">14</span>                     array[j + <span class="hljs-number">1</span>] = array[j];<br><span class="hljs-number">15</span>                     array[j] = temp;<br><span class="hljs-number">16</span>                 &#125;<br><span class="hljs-number">17</span>         <span class="hljs-keyword">return</span> array;<br><span class="hljs-number">18</span>     &#125;<br></code></pre></td></tr></table></figure><p>##2：选择排序</p><p>   表现<strong>最稳定的排序算法之一</strong>，因为<strong>无论什么数据进去都是O(n2)的时间复杂度</strong>，所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。理论上讲，选择排序可能也是平时排序一般人想到的最多的排序方法了吧。</p><p>   选择排序(Selection-sort)是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。 </p><p>###2.1 算法描述</p><p>n个记录的直接选择排序可经过n-1趟直接选择排序得到有序结果。具体算法描述如下：</p><ul><li>初始状态：无序区为R[1..n]，有序区为空；</li><li>第i趟排序(i=1,2,3…n-1)开始时，当前有序区和无序区分别为R[1..i-1]和R(i..n）。该趟排序从当前无序区中-选出关键字最小的记录 R[k]，将它与无序区的第1个记录R交换，使R[1..i]和R[i+1..n)分别变为记录个数增加1个的新有序区和记录个数减少1个的新无序区；</li><li>n-1趟结束，数组有序化了。</li></ul><p>###2.2 代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">　<span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 选择排序</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> array</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] selectionSort(<span class="hljs-keyword">int</span>[] array) &#123;<br>    <span class="hljs-keyword">if</span> (array.length == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> array;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123;<br>        <span class="hljs-keyword">int</span> minIndex = i;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i; j &lt; array.length; j++) &#123;<br>            <span class="hljs-keyword">if</span> (array[j] &lt; array[minIndex]) <span class="hljs-comment">//找到最小的数</span><br>                minIndex = j; <span class="hljs-comment">//将最小数的索引保存</span><br>        &#125;<br>        <span class="hljs-keyword">int</span> temp = array[minIndex];<br>        array[minIndex] = array[i];<br>        array[i] = temp;<br>    &#125;<br>    <span class="hljs-keyword">return</span> array;<br>&#125;<br></code></pre></td></tr></table></figure><p>##3：插入排序（Insertion Sort）</p><p>​    插入排序（Insertion-Sort）的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p><p>###3.1 算法描述</p><p>一般来说，插入排序都采用in-place在数组上实现。具体算法描述如下：</p><ul><li>从第一个元素开始，该元素可以认为已经被排序；</li><li>取出下一个元素，在已经排序的元素序列中从后向前扫描；</li><li>如果该元素（已排序）大于新元素，将该元素移到下一位置；</li><li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；</li><li>将新元素插入到该位置后；</li><li>重复步骤2~5。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>刷算法的相关代码</title>
    <link href="/2019/10/10/java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%89%9B%E5%AE%A2%E7%BD%91%E4%B8%8A%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86/"/>
    <url>/2019/10/10/java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%89%9B%E5%AE%A2%E7%BD%91%E4%B8%8A%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="刷算法的相关代码"><a href="#刷算法的相关代码" class="headerlink" title="刷算法的相关代码"></a>刷算法的相关代码</h1><p>###1：计算字符串最后一个单词的长度</p><p>主要是输入 System.in   给到了 InputStream</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.InputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        <span class="hljs-keyword">int</span> times=<span class="hljs-number">0</span>;<br>        InputStream in=System.in;<br>        <span class="hljs-keyword">char</span> c=(<span class="hljs-keyword">char</span>) in.read();<br>        <span class="hljs-keyword">while</span>(c!=<span class="hljs-string">&#x27;\n&#x27;</span>)&#123;<br>            <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27; &#x27;</span>)&#123;<br>                times=<span class="hljs-number">0</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                times+=<span class="hljs-number">1</span>;<br>            &#125;<br>            c=(<span class="hljs-keyword">char</span>) in.read();<br>        &#125;<br>        System.out.println(times);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>###2:计算某个字母出现的次数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span></span>&#123;<br>   <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span><span class="hljs-keyword">throws</span> IOException</span>&#123;<br>    BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(System.in));<br>    String str = br.readLine();<br>    String s = br.readLine();<br>    <span class="hljs-keyword">char</span> check = s.toLowerCase().charAt(<span class="hljs-number">0</span>);<br>    System.out.println(getCount(str, check));<br>&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getCount</span><span class="hljs-params">(String str, <span class="hljs-keyword">char</span> check)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">char</span>[] chars = str.toLowerCase().toCharArray();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">char</span> ch: chars)&#123;<br>            <span class="hljs-keyword">if</span>(ch == check)&#123;<br>                count++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>###3：排序</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.io.*;<br><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br><br>    public <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(<span class="hljs-built_in">String</span>[] args) throws IOException &#123;<br>    <br>        BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(System.<span class="hljs-keyword">in</span>));<br>        <span class="hljs-built_in">String</span> inputCount;<br>    <br>        <span class="hljs-keyword">while</span> ((inputCount = br.readLine()) != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-built_in">int</span> count = Integer.parseInt(inputCount);<br>            <span class="hljs-built_in">String</span>[] input = br.readLine().split(<span class="hljs-string">&quot; &quot;</span>);<br>            <span class="hljs-built_in">int</span> flag = Integer.parseInt(br.readLine());<br>            <span class="hljs-built_in">int</span>[] <span class="hljs-built_in">num</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[input.length];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; input.length; i++) &#123;<br>                <span class="hljs-built_in">num</span>[i] = Integer.parseInt(input[i]);<br>            &#125;<br>            quickSort(<span class="hljs-built_in">num</span>,<span class="hljs-number">0</span>,<span class="hljs-built_in">num</span>.length - <span class="hljs-number">1</span>);<br>            StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();<br>            <span class="hljs-keyword">if</span>(flag == <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-built_in">num</span>.length; j++) &#123;<br>                    sb.append(<span class="hljs-built_in">num</span>[j]).append(<span class="hljs-string">&quot; &quot;</span>);<br>                &#125;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> k = <span class="hljs-built_in">num</span>.length - <span class="hljs-number">1</span>; k &gt;= <span class="hljs-number">0</span>; k--) &#123;<br>                    sb.append(<span class="hljs-built_in">num</span>[k]).append(<span class="hljs-string">&quot; &quot;</span>);<br>                &#125;<br>            &#125;<br>            System.out.println(sb.substring(<span class="hljs-number">0</span>,sb.length()<span class="hljs-number">-1</span>));<br>        &#125;<br>    <br>    &#125;<br>    <br>    public <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> quickSort(<span class="hljs-built_in">int</span>[] <span class="hljs-built_in">num</span>, <span class="hljs-built_in">int</span> L, <span class="hljs-built_in">int</span> R) &#123;<br>        <span class="hljs-keyword">if</span> (L &gt;= R) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-built_in">int</span> p = partition(<span class="hljs-built_in">num</span>, L, R);<br>        quickSort(<span class="hljs-built_in">num</span>, L, p - <span class="hljs-number">1</span>);<br>        quickSort(<span class="hljs-built_in">num</span>, p+<span class="hljs-number">1</span>, R);<br>    &#125;<br>    <br>    public <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> partition(<span class="hljs-built_in">int</span>[] <span class="hljs-built_in">num</span>, <span class="hljs-built_in">int</span> L, <span class="hljs-built_in">int</span> R) &#123;<br>        <span class="hljs-built_in">int</span> key = <span class="hljs-built_in">num</span>[L];<br>        <span class="hljs-built_in">int</span> pivot = L;<br>    <br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = L + <span class="hljs-number">1</span>; i &lt;= R; i++) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">num</span>[i] &lt; key) &#123;<br>                <span class="hljs-built_in">int</span> temp = <span class="hljs-built_in">num</span>[++pivot];<br>                <span class="hljs-built_in">num</span>[pivot] = <span class="hljs-built_in">num</span>[i];<br>                <span class="hljs-built_in">num</span>[i] = temp;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">int</span> tt = <span class="hljs-built_in">num</span>[pivot];<br>        <span class="hljs-built_in">num</span>[pivot] = <span class="hljs-built_in">num</span> [L];<br>        <span class="hljs-built_in">num</span>[L] = tt;<br>        <span class="hljs-keyword">return</span> pivot;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>###4：输入一个int型的正整数，计算出该int型数据在内存中存储时1的个数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>         BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(System.in));<br>         String line;<br>         <span class="hljs-keyword">while</span>(<span class="hljs-keyword">null</span> != (line = br.readLine()))&#123;<br>             <span class="hljs-keyword">char</span>[] numChars = Integer.toBinaryString(Integer.parseInt(line)).toCharArray();<br>             <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>             <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;numChars.length;i++)&#123;<br>                 <span class="hljs-keyword">if</span>(numChars[i] == <span class="hljs-string">&#x27;1&#x27;</span>)&#123;<br>                     count++;<br>                 &#125;<br>             &#125;<br>             System.out.println(count);<br>         &#125;<br>     &#125;       <br>&#125;<br></code></pre></td></tr></table></figure><p>###5:动态规划的题目</p><p>   计算最少出列多少位同学，使得剩下的同学排成合唱队形</p><p>说明：</p><p>​    N位同学站成一排，音乐老师要请其中的(N-K)位同学出列，使得剩下的K位同学排成合唱队形。<br>合唱队形是指这样的一种队形：设K位同学从左到右依次编号为1，2…，K，他们的身高分别为T1，T2，…，TK，  则他们的身高满足存在i（1&lt;=i&lt;=K）使得T1&lt;T2&lt;……&lt;Ti-1<Ti>Ti+1&gt;……&gt;TK。</p><p>你的任务是，已知所有N位同学的身高，计算最少需要几位同学出列，可以使得剩下的同学排成合唱队形。</p><h3 id="6："><a href="#6：" class="headerlink" title="6："></a>6：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">checkBorther</span><span class="hljs-params">(String str1, String str2)</span></span>&#123;<br>        <span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">26</span>];<br>        <span class="hljs-keyword">char</span>[] ch1 = str1.toCharArray();<br>        <span class="hljs-keyword">char</span>[] ch2 = str2.toCharArray();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;ch1.length; i++)&#123;<br>            arr[ch1[i]-<span class="hljs-string">&#x27;a&#x27;</span>]++;<br>            arr[ch2[i]-<span class="hljs-string">&#x27;a&#x27;</span>]--;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">26</span>; i++)&#123;<br>            <span class="hljs-keyword">if</span>(arr[i]!=<span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>    Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.in);<br>    <span class="hljs-keyword">while</span>(sc.hasNext())&#123;<br>        <span class="hljs-keyword">int</span> N = sc.nextInt(); <span class="hljs-comment">//输入字典中单词的个数</span><br>        String[] str = <span class="hljs-keyword">new</span> String[N];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;N; i++)&#123; <span class="hljs-comment">//输入n个单词作为字典单词</span><br>            str[i]=sc.next();<br>        &#125;<br>        <span class="hljs-comment">// 查找兄弟单词</span><br>        String findStr = sc.next();<span class="hljs-comment">//输入一个待查单词</span><br>        <span class="hljs-keyword">int</span> ind = sc.nextInt(); <span class="hljs-comment">//输入待查单词的 指定序号     </span><br>        ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;N; i++)&#123;<br>           <span class="hljs-keyword">if</span>((str[i].length() == findStr.length()) &amp;&amp; (!str[i].equals(findStr)))&#123;<span class="hljs-comment">//长度相等 且 字符串不相等</span><br>                <span class="hljs-keyword">if</span>(checkBorther(findStr,str[i]))&#123;<br>                    list.add(str[i]);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//输出 </span><br>        System.out.println(list.size());     <br><br>​        Collections.sort(list);<br>​        <span class="hljs-keyword">if</span>(list.size()&gt;=ind)&#123;<br>​            System.out.println(list.get(ind-<span class="hljs-number">1</span>));  <br>​        &#125;<br><br>​    &#125;<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br>c = sys.stdin.readline()<br>time1 = sys.stdin.readline()<br><br>a, b = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, c.split(<span class="hljs-string">&#x27; &#x27;</span>))<br><br>n_time = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, time1.split(<span class="hljs-string">&#x27; &#x27;</span>)))<br>n_time = <span class="hljs-built_in">sorted</span>(n_time)<br><br>l_list = [[] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(a)]<br><br><span class="hljs-keyword">if</span> b &lt;= a:<br>    print(n_time[-<span class="hljs-number">1</span>])<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(b):<br>        l_list[i % a].append(n_time[i])<br><br>    res_list = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> l_list:<br>        res_list.append(<span class="hljs-built_in">sum</span>(i))<br><br>    res = <span class="hljs-built_in">max</span>(res_list)<br>    print(res)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split(<span class="hljs-string">&#x27;,&#x27;</span>)))<br><br>dic = &#123;&#125;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">str</span>(i) <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> dic:<br>        dic[<span class="hljs-built_in">str</span>(i)] = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        dic[<span class="hljs-built_in">str</span>(i)] += <span class="hljs-number">1</span><br><br>dic = <span class="hljs-built_in">sorted</span>(dic.items(), key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">1</span>], reverse=<span class="hljs-literal">True</span>)<br><br>res = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> dic:<br>    res.append(i[<span class="hljs-number">0</span>])<br><br>res = <span class="hljs-string">&#x27;,&#x27;</span>.join(res)<br>print(res)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#递归,下降二叉树</span><br><span class="hljs-function"><span class="hljs-keyword">def</span>` `<span class="hljs-title">perm</span>(<span class="hljs-params">lis,begin,end</span>):</span><br> ``<span class="hljs-comment">#print &quot;调用perm函数&quot;</span><br> ``<span class="hljs-keyword">if</span>` `begin&gt;``=``end:<br>  ``<span class="hljs-built_in">print</span>` `lis<br> ``<span class="hljs-keyword">else</span>``:<br>  ``i ``=` `begin <br>  ``<span class="hljs-keyword">for</span>` `num ``<span class="hljs-keyword">in</span>` `<span class="hljs-built_in">range</span>``(begin,end):<br>   ``lis[num],lis[i] ``=` `lis[i],lis[num] ``<span class="hljs-comment">#固定当前位置,在进行下一位的排列</span><br>   ``<span class="hljs-comment">#print &quot;-----num:%d,begin:%d&quot;%(num,begin)</span><br>   ``perm(lis,begin``+``<span class="hljs-number">1</span>``,end)<br>   ``<span class="hljs-comment">#print &quot;*****num:%d,begin:%d&quot;%(num,begin)</span><br>   ``<span class="hljs-comment">#调用结束之后还需要回溯将交换位置的元素还原,以供其他下降路径使用(二叉树)</span><br>   ``lis[num],lis[i] ``=` `lis[i],lis[num]<br><br><br>lis = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>perm(lis,<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(lis))<br></code></pre></td></tr></table></figure><p>###7 能赚多少钱的题目描述</p><p> 小王手里有点闲钱，想着做点卖水果的小买卖，给出两个数组m、n，用m[i]表示第i个水果的成本价，n[i]表示第i个水果能卖出的价钱，假如现在有本钱k元，试问最后最多能赚多少钱？</p><p>说明：<br> 1.每种水果只能买一次，只能卖一次；<br> 2.数组m,n大小不超过50；<br> 3.数组元素为正整数，不超过1000。</p><p>输入描述<br> 1.数组m, n;<br> 2.本钱k<br> 备注：<br> 1.首行输入逗号分隔的数组m的元素值<br> 2.第二行输入逗号分隔数字n的元素值<br> 3.第三行输入本钱</p><p>输出描述<br> 最多能赚多少钱。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs css"># -*- coding: UTF-<span class="hljs-number">8</span> -*-<br>#m = <span class="hljs-string">&#x27;1,1,1,400&#x27;</span><br>#n = <span class="hljs-string">&#x27;2,2,2,410&#x27;</span><br>#k = <span class="hljs-number">15</span><br><br>import sys<br>m = sys.stdin.<span class="hljs-built_in">readline</span>()<br>n = sys.stdin.<span class="hljs-built_in">readline</span>()<br>k = sys.stdin.<span class="hljs-built_in">readline</span>()<br><br>m_array = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(int,m.<span class="hljs-built_in">split</span>(<span class="hljs-string">&#x27;,&#x27;</span>)))<br>n_array = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(int,n.<span class="hljs-built_in">split</span>(<span class="hljs-string">&#x27;,&#x27;</span>)))<br>k = <span class="hljs-built_in">int</span>(k)<br><br>visit = []<br>a_map = &#123;&#125;<br>for <span class="hljs-selector-tag">i</span> in range(len(n_array)):<br> a_map[i] = n_array[i] - m_array[i]<br><br>b_map = <span class="hljs-built_in">sorted</span>(a_map.<span class="hljs-built_in">items</span>(), key=lambda item:item[<span class="hljs-number">1</span>], reverse=True)<br><br><span class="hljs-built_in">while</span>(<span class="hljs-built_in">len</span>(b_map) != <span class="hljs-number">0</span>):<br> i = <span class="hljs-number">0</span><br> getDD = []<br> visit = []<br> <span class="hljs-built_in">while</span>(i &lt; <span class="hljs-built_in">len</span>(b_map)):<br>  key = b_map[i][<span class="hljs-number">0</span>]<br>  <span class="hljs-built_in">if</span>(m_array[key] &lt;= k):<br>   visit.<span class="hljs-built_in">append</span>(b_map[i])<br>   k -= m_array[key]<br>   getDD.<span class="hljs-built_in">append</span>(n_array[key])<br>  i+=<span class="hljs-number">1</span> <br><br> <span class="hljs-built_in">if</span>(<span class="hljs-built_in">len</span>(getDD) == <span class="hljs-number">0</span>):<br>    break<br><br> k+= <span class="hljs-built_in">sum</span>(getDD)<br> for data in visit:<br>    b_map.<span class="hljs-built_in">remove</span>(data) <br>print k<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
